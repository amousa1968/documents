#!/usr/bin/env bash

set -eu

REPO_DIR=${REPO_DIR:-/repo}
export GOPATH=${GOPATH:-/tmp/docker_run}
GIT_LFS_BUILD_DIR=${GIT_LFS_BUILD_DIR:-$GOPATH/c/cc_test/install_directory/git-lfs/git-lfs}
SRC_DIR=${SRC_DIR:-/src}

if [ -e /etc/os-release ]; then
  VERSION_ID=$(source /etc/os-release; echo ${VERSION_ID})
  OS_NAME=$(source /etc/os-release; echo ${NAME})
  OS_NAME=${OS_NAME,,}
else #Basically Centos 
  VERSION_ID=($(head -n 1 /etc/redhat-release | \grep -Eo '[0-9]+'))
  OS_NAME=$(awk '{print tolower($1)}' /etc/redhat-release)
  #Stupid ancient bash 3...
fi

case "${OS_NAME}" in
  centos*|red*)
    RPM_DIST=".el${VERSION_ID}"
    ;;
  fedora)
    RPM_DIST=".fc${VERSION_ID}"
    ;;
  sles)
    RPM_DIST=".sles${VERSION_ID}"
    ;;
  opensuse)
    RPM_DIST=".opensuse${VERSION_ID}"
    ;;
  *)
    RPM_DIST="%{nil}"
    ;;
esac

mkdir -p $(dirname "${GIT_LFS_BUILD_DIR}")
echo "Making a copy of git repo"
cp -r -T "${SRC_DIR}" "${GIT_LFS_BUILD_DIR}"

cd "${GIT_LFS_BUILD_DIR}"
git clean -xdf . || rpm/clean.bsh #clean is needed when git isn't already installed
rpm/build_rpms.bsh
rpmbuild --nodeps --define "dist ${RPM_DIST}" --define "_topdir ${GIT_LFS_BUILD_DIR}/rpm/" --target=i686 -bb "${GIT_LFS_BUILD_DIR}"/rpm/SPECS/git-lfs.spec

rsync -ra ${GIT_LFS_BUILD_DIR}/rpm/{SRPMS,RPMS} ${REPO_DIR}

if [ "${FINAL_UID-}:${FINAL_GID-}" != ":" ]; then
  chown ${FINAL_UID-}:${FINAL_GID-} -R /repo
fi